package com.example.accessingdatamysql.controller;

import com.example.accessingdatamysql.model.Customer;
import com.example.accessingdatamysql.model.Product;
import com.example.accessingdatamysql.model.Transaction;
import com.example.accessingdatamysql.repository.CustomerRepository;
import com.example.accessingdatamysql.repository.ProductRepository;
import com.example.accessingdatamysql.repository.TransactionRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;
import java.util.List;

@Controller // This means that this class is a Controller
@RequestMapping(path = "/demo") // This means URL's start with /demo (after Application path)
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private CustomerRepository customerRepository;
    @Autowired
    private ProductRepository productRepository;
    @Autowired
    private TransactionRepository transactionRepository;

    @PostMapping(path = "/add") // Map ONLY POST Requests
    public @ResponseBody
    String addNewCustomer(
            @RequestParam String firstName,
            @RequestParam String lastName,
            @RequestParam String zipCode,
            @RequestParam String email) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        Customer n = new Customer();
        n.setFirstName(firstName);
        n.setLastName(lastName);
        n.setZipcode(zipCode);
        n.setEmail(email);
        return "Saved";
    }

    @DeleteMapping(path = "/delete")
    public @ResponseBody
    String deleteUserById(@RequestParam int id) {
        customerRepository.deleteById(id);
        return "deleted";
    }

    @GetMapping(path = "/allCustomer")
    public @ResponseBody
    Iterable<Customer> getAllUsers() {
        // This returns a JSON or XML with the users
        return customerRepository.findAll();
    }

    @GetMapping(path = "/allCustomerInBayArea")
    public @ResponseBody
    Iterable<Customer> getAllUsersInBayArea() {
        List<String> bayAreaZip = Arrays.asList("94041", "94086");
        return customerRepository.findCustomerByZipcode(bayAreaZip);
    }

    @GetMapping(path = "/allProductByCategory")
    public @ResponseBody
    Iterable<Product> getProductByCategory(@RequestParam String category) {
        return productRepository.findProductByCategory(category);
    }

    @GetMapping(path = "/allProductWithPriceGreaterThan")
    public @ResponseBody
    Iterable<Product> getProductWithPriceGreaterThan(@RequestParam double number) {
        return productRepository.findProductWithPriceGreaterThan(number);
    }

    @GetMapping(path = "/allTransactionBetweenDates")
    public @ResponseBody
    Iterable<Transaction> getTransactionBetweenDates(@RequestParam String startDate, @RequestParam String endDate) throws ParseException {
        DateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
        Date start = formatter.parse(startDate);
        Date end = formatter.parse(endDate);
        return transactionRepository.findAllTransactionBetweenDates(start, end);
    }


}